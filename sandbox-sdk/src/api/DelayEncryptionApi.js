/*
 * Cryptosat Sandbox
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {KeypairResponse} from '../model/KeypairResponse';
import {PrivateKeyResponse} from '../model/PrivateKeyResponse';
import {PublicKeyResponse} from '../model/PublicKeyResponse';


export class DelayEncryptionApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    delayEncKeypairDelayPostWithHttpInfo(delay) {
      
      let postBody = null;
      // verify the required parameter 'delay' is set
      if (delay === undefined || delay === null) {
        throw new Error("Missing the required parameter 'delay' when calling delayEncKeypairDelayPost");
      }

      let pathParams = {
        'delay': delay
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['RequestAuthorizer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeypairResponse;

      return this.apiClient.callApi(
        '/delay-enc-keypair/{delay}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
    delayEncKeypairDelayPost(delay) {
      return this.delayEncKeypairDelayPostWithHttpInfo(delay)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    delayEncKeypairsKeypairIdPrivateGetWithHttpInfo(keypairId) {
      
      let postBody = null;
      // verify the required parameter 'keypairId' is set
      if (keypairId === undefined || keypairId === null) {
        throw new Error("Missing the required parameter 'keypairId' when calling delayEncKeypairsKeypairIdPrivateGet");
      }

      let pathParams = {
        'keypair_id': keypairId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['RequestAuthorizer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateKeyResponse;

      return this.apiClient.callApi(
        '/delay-enc-keypairs/{keypair_id}/private', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
    delayEncKeypairsKeypairIdPrivateGet(keypairId) {
      return this.delayEncKeypairsKeypairIdPrivateGetWithHttpInfo(keypairId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    delayEncKeypairsKeypairIdPublicGetWithHttpInfo(keypairId) {
      
      let postBody = null;
      // verify the required parameter 'keypairId' is set
      if (keypairId === undefined || keypairId === null) {
        throw new Error("Missing the required parameter 'keypairId' when calling delayEncKeypairsKeypairIdPublicGet");
      }

      let pathParams = {
        'keypair_id': keypairId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['RequestAuthorizer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicKeyResponse;

      return this.apiClient.callApi(
        '/delay-enc-keypairs/{keypair_id}/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
    delayEncKeypairsKeypairIdPublicGet(keypairId) {
      return this.delayEncKeypairsKeypairIdPublicGetWithHttpInfo(keypairId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}