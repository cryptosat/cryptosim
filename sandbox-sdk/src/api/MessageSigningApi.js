/*
 * Cryptosat Sandbox
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {SignMessageBody} from '../model/SignMessageBody';
import {SignMessageResponse} from '../model/SignMessageResponse';
import {StatusResponse} from '../model/StatusResponse';


export class MessageSigningApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    signMessagePostWithHttpInfo(body) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signMessagePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['RequestAuthorizer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignMessageResponse;

      return this.apiClient.callApi(
        '/sign-message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
    signMessagePost(body) {
      return this.signMessagePostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    signMessageStatusRequestUuidGetWithHttpInfo(requestUuid) {
      
      let postBody = null;
      // verify the required parameter 'requestUuid' is set
      if (requestUuid === undefined || requestUuid === null) {
        throw new Error("Missing the required parameter 'requestUuid' when calling signMessageStatusRequestUuidGet");
      }

      let pathParams = {
        'request_uuid': requestUuid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['RequestAuthorizer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatusResponse;

      return this.apiClient.callApi(
        '/sign-message/status/{request_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
    signMessageStatusRequestUuidGet(requestUuid) {
      return this.signMessageStatusRequestUuidGetWithHttpInfo(requestUuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}