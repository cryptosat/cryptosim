/*
 * Cryptosat Sandbox
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.sandbox-sdk);
  }
}(this, function(expect, sandbox-sdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new sandbox-sdk.PrivateBallotApi();
  });

  describe('(package)', function() {
    describe('PrivateBallotApi', function() {
      describe('ballotMinParticipantsPost', function() {
        it('should call ballotMinParticipantsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for ballotMinParticipantsPost call and complete the assertions
          /*

          instance.ballotMinParticipantsPost(minParticipants).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(sandbox-sdk.CreateBallotResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ballotsBallotIdFinalizePost', function() {
        it('should call ballotsBallotIdFinalizePost successfully', function(done) {
          // TODO: uncomment, update parameter values for ballotsBallotIdFinalizePost call
          /*

          instance.ballotsBallotIdFinalizePost(ballotId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ballotsBallotIdGet', function() {
        it('should call ballotsBallotIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for ballotsBallotIdGet call and complete the assertions
          /*

          instance.ballotsBallotIdGet(ballotId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(sandbox-sdk.GetBallotResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ballotsBallotIdResultGet', function() {
        it('should call ballotsBallotIdResultGet successfully', function(done) {
          // TODO: uncomment, update parameter values for ballotsBallotIdResultGet call and complete the assertions
          /*

          instance.ballotsBallotIdResultGet(ballotId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(sandbox-sdk.GetResultResponse);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('ballotsBallotIdVotePost', function() {
        it('should call ballotsBallotIdVotePost successfully', function(done) {
          // TODO: uncomment, update parameter values for ballotsBallotIdVotePost call
          /*

          instance.ballotsBallotIdVotePost(body, ballotId).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
